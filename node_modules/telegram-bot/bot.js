const { Telegraf } = require("telegraf");
require("dotenv").config();

class TelegramBot {
  constructor() {
    this.bot = new Telegraf(process.env.BOT_TOKEN);
    this.chatId = process.env.CHAT_ID;
    this.init();
  }

  init() {
    // –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
    this.bot.start((ctx) => {
      ctx.reply("–ë–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Å–∞–π—Ç–∞ –∑–∞–ø—É—â–µ–Ω!");
    });

    // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è chat_id
    this.bot.command("chatid", (ctx) => {
      ctx.reply(`–í–∞—à chat_id: ${ctx.chat.id}`);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.catch((err, ctx) => {
      console.error("–û—à–∏–±–∫–∞ –±–æ—Ç–∞:", err);
    });

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    this.bot.launch();
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
  async sendOrderNotification(orderData) {
    try {
      const contactInfo = [];
      if (orderData.phone) contactInfo.push(`üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone}`);
      if (orderData.telegram)
        contactInfo.push(`üí¨ Telegram: ${orderData.telegram}`);
      if (orderData.email) contactInfo.push(`üìß Email: ${orderData.email}`);

      const message = `
üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!

üë§ –ö–ª–∏–µ–Ω—Ç: ${orderData.customerName || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
${contactInfo.join("\n")}

üõçÔ∏è –¢–æ–≤–∞—Ä—ã:
${orderData.items
  .map(
    (item) =>
      `‚Ä¢ ${item.name}\n  –ö–æ–¥: ${item.code}\n –∫–æ–ª-–≤–æ:${item.quantity}  –¶–µ–Ω–∞: ${item.price}‚ÇΩ\n`
  )
  .join("\n")}

üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${orderData.totalPrice}‚ÇΩ
‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: ${new Date().toLocaleString("ru-RU")}
            `;

      await this.bot.telegram.sendMessage(this.chatId, message);
      return { success: true, message: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
      return { success: false, error: error.message };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã
  async sendContactMessage(contactData) {
    try {
      const message = `
üìß –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞!

üë§ –ò–º—è: ${contactData.name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
üìß Email: ${contactData.email || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${contactData.phone || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:
${contactData.message}

‚è±Ô∏è –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}
            `;

      await this.bot.telegram.sendMessage(this.chatId, message);
      return { success: true, message: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      return { success: false, error: error.message };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendCustomMessage(text) {
    try {
      await this.bot.telegram.sendMessage(this.chatId, text);
      return { success: true, message: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      return { success: false, error: error.message };
    }
  }

  stop() {
    this.bot.stop("SIGINT");
  }
}

module.exports = TelegramBot;
