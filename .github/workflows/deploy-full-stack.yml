name: Deploy Full Stack Application

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy Full Stack to Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: 212.8.227.80
        username: root
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        script: |
          echo "🚀 Starting full stack deployment..."
          
          # Обновление системы и установка базовых пакетов
          apt update
          apt install -y curl git wget software-properties-common apt-transport-https ca-certificates gnupg lsb-release
          
          # Установка Docker если не установлен
          if ! command -v docker &> /dev/null; then
            echo "🐳 Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sh get-docker.sh
            rm get-docker.sh
          fi
          
          # Установка Docker Compose если не установлен
          if ! command -v docker-compose &> /dev/null; then
            echo "🐙 Installing Docker Compose..."
            curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
          fi
          
          # Запуск Docker если не запущен
          systemctl start docker
          systemctl enable docker
          
          # Создание директории проекта
          mkdir -p /var/www
          cd /var/www
          
          # Остановка всех контейнеров если запущены
          if [ -d "dshina" ]; then
            cd dshina
            docker-compose down 2>/dev/null || true
            docker system prune -f
            cd ..
          fi
          
          # Удаление старой версии и клонирование новой
          rm -rf dshina
          git clone ${{ github.server_url }}/${{ github.repository }}.git dshina
          cd dshina
          
          # Переключение на нужную ветку
          git checkout ${{ github.ref_name }}
          
          echo "📝 Creating environment file..."
          
          # Создание .env файла
          cat > .env << 'EOF'
          # Backend Environment
          NODE_ENV=production
          PORT=4000
          
          # Frontend Environment  
          NEXT_PUBLIC_BASE_URL=http://212.8.227.80:4000
          
          # Telegram Bot Environment
          BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN || 'your-telegram-bot-token' }}
          CHAT_ID=${{ secrets.TELEGRAM_CHAT_ID || 'your-telegram-chat-id' }}
          EOF
          
          echo "🏗️ Building and starting all services..."
          
          # Сборка и запуск через Docker Compose
          docker-compose build --no-cache
          docker-compose up -d
          
          echo "⏳ Waiting for services to start..."
          sleep 60
          
          # Проверка статуса контейнеров
          echo "📊 Services status:"
          docker-compose ps
          
          # Проверка логов
          echo "📋 Recent logs:"
          docker-compose logs --tail=10 backend
          docker-compose logs --tail=10 frontend
          docker-compose logs --tail=10 telegram-bot
          
          echo "✅ Full stack deployment completed!"
          echo ""
          echo "🌐 Services are accessible at:"
          echo "  - Frontend: http://212.8.227.80:3000"
          echo "  - Backend API: http://212.8.227.80:4000"  
          echo "  - Telegram Bot: http://212.8.227.80:3001"
          echo "  - Nginx Proxy: http://212.8.227.80 (if enabled)"
          echo ""
          echo "🔧 To check services status: docker-compose ps"
          echo "📋 To view logs: docker-compose logs [service-name]"